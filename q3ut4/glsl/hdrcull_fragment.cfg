uniform sampler2D source;
uniform float hipass;
uniform float width;

//HDR style cutoff shader.  If the luminosity of a given pixel is below hipass, sets it to black.

void main(void)
{
        vec4 color = texture2D(source, gl_TexCoord[0].st);

        //calculate luminosity as  (max+min) /2
      float lum = max (color.x, color.y);
        float realmax = max(color.z, lum);

        lum = min (color.x, color.y);
        float realmin = min( color.z, lum);

        lum =  (  realmax + realmin ) * 0.5f;
/*
        //calculate the cutoff using voodoo instead of an IF
        float working = clamp( lum-hipass,0.0f, 1.0f);
        float fraction = ceil(clamp( lum-hipass,0.0f, 1.0f));
*/

/*
        float fraction = 0;
        if (hipass>0) {
         fraction = ceil(clamp( lum-hipass,0.0f, 1.0f));
        } else
        if (hipass<0) {
         if (lum<-hipass) fraction = 1.0f;
        }
*/
        float fraction;
        float ahpass = abs(hipass);
        if (width) {
         fraction = (cos(clamp((lum-ahpass)*width/ahpass+0.5f,0.0f,1.0f)*3.141592)*0.5f+0.5f);
         if (hipass>=0) fraction=1.0f-fraction;
        } else {
         if (hipass>0) {
          fraction = ceil(clamp( lum-hipass,0.0f, 1.0f));
         } else
         if (hipass<0) {
          if (lum<-hipass) fraction = 1.0f;
         }
        }


//        float fraction = cos(clamp((lum-abs(hipass)+0.5f)*2.0f*width,0.0f,1.0f)*3.141592f);
//        if (hipass<0) fraction=-fraction;


        gl_FragColor = color * fraction;

        //This, while extremely gross, allows a bit of color to creep into the bloom.
//        gl_FragColor=   color* ceil(clamp( color-hipass,0.0,1.0));
}
